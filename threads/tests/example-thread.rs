use core::mem;
use semilattice::SemiLattice;
use threads::{Actor, Root};

// https://gchq.github.io/CyberChef/#recipe=From_Decimal('Comma',false)To_Hex('0x%20with%20comma',0)
// (assert_eq failure -> decimal list -> hex list)
#[test]
fn example_discussion_test_vector() {
    // Alice has multiple devices
    let mut alice_0_slice = Default::default();
    let mut alice_0 = Actor::new(&mut alice_0_slice, "alice#0".to_owned());
    let mut alice_1_slice = Default::default();
    let mut alice_1 = Actor::new(&mut alice_1_slice, "alice#1".to_owned());

    // Bob has one
    let mut bob_slice = Default::default();
    let mut bob = Actor::new(&mut bob_slice, "bob".to_owned());

    // Alice creates a new issue from her laptop
    let a0 = alice_0.new_thread(
        "Issue with feature X".to_owned(),
        "Hello world. I have this issue [..]".to_owned(),
        ["bug".to_owned(), "incorrect-tag".to_owned()],
    );

    // Bob responds and adjusts the tags for the thread
    let b0 = bob.reply(a0.clone(), "Huh. Can you run the tests?".to_owned());
    bob.adjust_tags(a0, ["regression".to_owned()], ["incorrect-tag".to_owned()]);

    // Alice reacts form her phone
    let _a1 = alice_1.react(b0.clone(), ":hourglass:".to_owned(), true);

    // responds from her laptop
    let a2 = alice_0.reply(b0, "Ah! Test #3 failed. [..]".to_owned());
    // edits her response from her phone
    let _a2_edit_version = alice_1.edit(a2.1, "Ah! Test #4 failed. [..]".to_owned());
    // and redacts her first version to hide her typo.
    alice_1.redact(a2.1, 0);

    // CBOR encode each actor's slices.

    let mut buffer = Vec::new();
    minicbor::encode(&alice_0.slice, &mut buffer).expect("Failed to CBOR encode Alice#0.slice.");
    assert_eq!(
        &buffer,
        &[
            0x82, 0x82, 0x83, 0x81, 0x81, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x20, 0x77, 0x69,
            0x74, 0x68, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x58, 0x81, 0x82,
            0x01, 0x81, 0x78, 0x23, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c,
            0x64, 0x2e, 0x20, 0x49, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73,
            0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x20, 0x5b, 0x2e, 0x2e, 0x5d, 0x80, 0x83, 0x80,
            0x81, 0x82, 0x01, 0x81, 0x78, 0x18, 0x41, 0x68, 0x21, 0x20, 0x54, 0x65, 0x73, 0x74,
            0x20, 0x23, 0x33, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e, 0x20, 0x5b, 0x2e,
            0x2e, 0x5d, 0x80, 0xa2, 0x67, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x23, 0x30, 0xa1, 0x00,
            0x83, 0x80, 0xa2, 0x63, 0x62, 0x75, 0x67, 0x81, 0x01, 0x6d, 0x69, 0x6e, 0x63, 0x6f,
            0x72, 0x72, 0x65, 0x63, 0x74, 0x2d, 0x74, 0x61, 0x67, 0x81, 0x01, 0xa0, 0x63, 0x62,
            0x6f, 0x62, 0xa1, 0x00, 0x83, 0x81, 0x01, 0xa0, 0xa0
        ]
    );

    buffer.clear();
    minicbor::encode(&alice_1.slice, &mut buffer).expect("Failed to CBOR encode Alice#1.slice.");
    assert_eq!(
        &buffer,
        &[
            0x82, 0x82, 0x83, 0x80, 0x80, 0x80, 0x83, 0x80, 0x81, 0x82, 0x02, 0x80, 0x80, 0xa1,
            0x63, 0x62, 0x6f, 0x62, 0xa1, 0x00, 0x83, 0x80, 0xa0, 0xa1, 0x6b, 0x3a, 0x68, 0x6f,
            0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x3a, 0x81, 0x01
        ]
    );

    let alice_combined = alice_0.slice.clone().join(alice_1.slice.clone());

    buffer.clear();
    minicbor::encode(&alice_combined, &mut buffer).expect("Failed to CBOR encode Alice.slice.");
    assert_eq!(
        &buffer,
        &[
            0x82, 0x82, 0x83, 0x81, 0x81, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x20, 0x77, 0x69,
            0x74, 0x68, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x58, 0x81, 0x82,
            0x01, 0x81, 0x78, 0x23, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c,
            0x64, 0x2e, 0x20, 0x49, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73,
            0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x20, 0x5b, 0x2e, 0x2e, 0x5d, 0x80, 0x83, 0x80,
            0x81, 0x82, 0x02, 0x80, 0x80, 0xa2, 0x67, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x23, 0x30,
            0xa1, 0x00, 0x83, 0x80, 0xa2, 0x63, 0x62, 0x75, 0x67, 0x81, 0x01, 0x6d, 0x69, 0x6e,
            0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x2d, 0x74, 0x61, 0x67, 0x81, 0x01, 0xa0,
            0x63, 0x62, 0x6f, 0x62, 0xa1, 0x00, 0x83, 0x81, 0x01, 0xa0, 0xa1, 0x6b, 0x3a, 0x68,
            0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x3a, 0x81, 0x01
        ]
    );

    buffer.clear();
    minicbor::encode(&bob.slice, &mut buffer).expect("Failed to CBOR encode Bob.slice.");
    assert_eq!(
        &buffer,
        &[
            0x82, 0x81, 0x83, 0x80, 0x81, 0x82, 0x01, 0x81, 0x78, 0x1b, 0x48, 0x75, 0x68, 0x2e,
            0x20, 0x43, 0x61, 0x6e, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x72, 0x75, 0x6e, 0x20, 0x74,
            0x68, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74, 0x73, 0x3f, 0x80, 0xa1, 0x67, 0x61, 0x6c,
            0x69, 0x63, 0x65, 0x23, 0x30, 0xa1, 0x00, 0x83, 0x81, 0x00, 0xa2, 0x6d, 0x69, 0x6e,
            0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x2d, 0x74, 0x61, 0x67, 0x81, 0x02, 0x6a,
            0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x81, 0x01, 0xa0
        ]
    );

    let mut root = Root::default();
    root.inner
        .entry_mut("alice".to_owned())
        .join_assign(mem::take(alice_0.slice));
    root.inner
        .entry_mut("alice".to_owned())
        .join_assign(mem::take(alice_1.slice));
    root.inner
        .entry_mut("bob".to_owned())
        .join_assign(mem::take(bob.slice));

    buffer.clear();
    minicbor::encode(&root.inner, &mut buffer).expect("Failed to CBOR encode root.");
    assert_eq!(
        &buffer,
        &[
            0xa2, 0x65, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x82, 0x82, 0x83, 0x81, 0x81, 0x74, 0x49,
            0x73, 0x73, 0x75, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x66, 0x65, 0x61, 0x74,
            0x75, 0x72, 0x65, 0x20, 0x58, 0x81, 0x82, 0x01, 0x81, 0x78, 0x23, 0x48, 0x65, 0x6c,
            0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x20, 0x49, 0x20, 0x68, 0x61,
            0x76, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x20,
            0x5b, 0x2e, 0x2e, 0x5d, 0x80, 0x83, 0x80, 0x81, 0x82, 0x02, 0x80, 0x80, 0xa2, 0x67,
            0x61, 0x6c, 0x69, 0x63, 0x65, 0x23, 0x30, 0xa1, 0x00, 0x83, 0x80, 0xa2, 0x63, 0x62,
            0x75, 0x67, 0x81, 0x01, 0x6d, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
            0x2d, 0x74, 0x61, 0x67, 0x81, 0x01, 0xa0, 0x63, 0x62, 0x6f, 0x62, 0xa1, 0x00, 0x83,
            0x81, 0x01, 0xa0, 0xa1, 0x6b, 0x3a, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73,
            0x73, 0x3a, 0x81, 0x01, 0x63, 0x62, 0x6f, 0x62, 0x82, 0x81, 0x83, 0x80, 0x81, 0x82,
            0x01, 0x81, 0x78, 0x1b, 0x48, 0x75, 0x68, 0x2e, 0x20, 0x43, 0x61, 0x6e, 0x20, 0x79,
            0x6f, 0x75, 0x20, 0x72, 0x75, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x73,
            0x74, 0x73, 0x3f, 0x80, 0xa1, 0x67, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x23, 0x30, 0xa1,
            0x00, 0x83, 0x81, 0x00, 0xa2, 0x6d, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
            0x74, 0x2d, 0x74, 0x61, 0x67, 0x81, 0x02, 0x6a, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73,
            0x73, 0x69, 0x6f, 0x6e, 0x81, 0x01, 0xa0
        ]
    );
}
